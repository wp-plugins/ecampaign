/**
 * 
 * ecampaign js support 
 * 
 * Notes that element names in embedded html in ecampaign.class.php
 * must match elements names in javascript.
 */


/*
 * @param button clicked when user sends email
 * @param callBack called when action completes
 * @return
 */

var ecam = {} ;

ecam.onClickSubmit = function (buttonElement, callBack)
{
  // check that we know where we are
  if (buttonElement == null)
  {
    alert('onClickSubmit(): clickable element not declared');
    return false;
  }
  var button = jQuery(buttonElement);
  // find the root of the form
  var formRoot = button.parents('form, .ecform');
  if (formRoot.length == 0)
  {
    alert('onClickSubmit(): no form wrapper');
    return false;
  }

  // find the element used to hold status messages
  var status = formRoot.find('.ecstatus');
  if (status.length == 0)
  {
    alert('onClickSubmit(): status element not declared');
    return false;
  }

  formRoot.find('.ecError').remove(); // remove any previous error messages    
  
  var fields = formRoot.find(".validateZipcode, .validatePostcode, .validateEmail, :visible.mandatory");

  patternMandatory = new RegExp(/([^\s]{2,})/);
  
  // http://msdn.microsoft.com/en-us/library/ff650303.aspx  US Postcode  
  patternZipcode = new RegExp(/^(\d{5}-\d{4}|\d{5}|\d{9})$|^([a-zA-Z]\d[a-zA-Z] \d[a-zA-Z]\d)$/);

  // http://en.wikipedia.org/wiki/UK_postcodes  
  patternUKPostcode = new RegExp(/^[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}$/);
  
  patternEmail = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);  
  
  // process the fields in order
  for (i=0 ; i < fields.length ; i++)
  {
    field = fields.eq(i);
    var pass = ecam.validateField(field.filter(":visible.mandatory"), status, "Required field", patternMandatory );
    if (!pass) return false;
    
    if (field.val().length == 0)  // skip non mandatory, empty fields
      continue ;
    
    var pass = ecam.validateField(field.filter(".validateZipcode"), status, "Invalid zipcode", patternZipcode);
    if (!pass) return false;
    
    var pass = ecam.validateField(field.filter(".validateUKPostcode"), status, "Invalid postcode", patternUKPostcode);
    if (!pass) return false;     
    
    var pass = ecam.validateField(field.filter(".validateEmail"), status, "Invalid email address", patternEmail); 
    if (!pass) return false;
  }

  // when the user sends email to the target or to his friends, all the fields are 
  // picked up from formRoot. However when sending to his friends, his  
  // visitorName and visitorEmail have to be picked up from the ecampaign-action form, 
  
  var formFields = jQuery('input[name="visitorName"],input[name="visitorEmail"]')
                   .add(formRoot.find("*"));
  
  // about to post to server...

  ecam.updateStatus(status,true,"waiting...");

  jQuery.ajax({
    type:     "POST",
    url:      ecampaign.ajaxurl,
    dataType: "json",
    data:     formFields.serializeArray(), // gather all input fields
    error:    function(httpRequest, textStatus, errorThrown)
    {
      if (httpRequest.status != undefined)  
        if (httpRequest.status != 200)   
      {
        ecam.updateStatus(status, false, httpRequest.status + " " + httpRequest.statusText);
        return ;
      }
      // Server may be returning xml/html but not in JSON, e.g. stack dump
      ecam.updateStatus(status, false, textStatus + " " + errorThrown) ;
    },
    success:  function(response, textStatus, httpRequest)
    {
      if (response == undefined)
      {
        ecam.updateStatus(status, false, 'Error: send aborted by server'); 
      }
      else 
      {
        if (response.success == undefined)  // has response been generated by plugin?
        {
          ecam.updateStatus(status, false, response); // e.g. die() called, no 
        }
        else
        {
          ecam.updateStatus(status, response.success, response.msg); callBack(response, button);
        }
      }
    }
  });
  return false; // suppress any other action
}

/**
 * validateField against regular expression
 */

ecam.validateField = function(field, status, errorText, pattern)
{
  if (field.length > 0 && !pattern.test(field.val().toUpperCase()))
  {
    field.focus();
    jQuery('<div></div>').addClass('ecFieldError ecError').html(errorText).appendTo(field.parent());
    return false ;
  }  
  return true ;
}


/**
 * update status which is normally written next to the send button
 */

ecam.updateStatus = function(status, success, msg)
{
  if (status.length == 0)
  {
    alert(msg);  return success ;  // fallback to alerts
  }
  // take care not to trash the status placeholder
  if (success)
    jQuery('<div></div>').addClass('ecOk').html(msg).appendTo(status.empty());
  else
    jQuery('<div></div>').addClass('ecError').html(msg).appendTo(status.empty());
}

/**
 * called back when email send to target
 * @param button (jQuery) clicked by user
 */

ecam.targetCallBack = function (response, button)
{
  // unsuccessful? - may need validation code 
  
  if (response.getCode != undefined && response.getCode == true)
  {
    // reveal box to capture validation code       
    jQuery('.eccode').show();   
  }  
  else
  {
    if (response.success)
    {
      // prevent user from trying to sending two messages
      
      button.attr("disabled","disabled");
      
      // you cannot send to friends until you get a nonce 
      // back from the server which you get after sending to target
      
      if (response.nonce != undefined)
      {
        // attach the server supplied nonce to the friends form
        jQuery('<input />')
        .attr('name', '_ajax_nonce')        
        .attr('type', 'hidden')   
        .attr('value', response.nonce)       
        .appendTo('#ec-friends .ecsend');
        
        // the friends form is enabled, now show it
        jQuery('#ec-friends').show();
        return false ; 
      }
    }
  }
}


/**
/**
 * called back when email send to friends
 * @param button (jQuery) clicked by user
 *
 * optionally empty the friends fields but it's useful for
 * site vistor to see the email addresses have been used.
 */


ecam.friendsCallBack = function(response, button)
{
//  jQuery('#ec-friendsList .first').find('input').attr('value',''); // blank field
//  jQuery('#ec-friends-list .subsequent').remove();
}


/**
 * respond to user
 * add input field for another friend
 * by copying the first box
 *
 * don't seem to be able to clone 
 */

ecam.addFriend = function() 
{
  var subsequentFriend = jQuery('#ec-friends-list div:first')
      .find('.ecError').remove().end()    // remove any errors
      .clone(true)
      .addClass('subsequent')
      .eq(0)         // don't understand why needed
      .appendTo(jQuery('#ec-friends-list'));
  
  subsequentFriend.find('.ecError').remove(); 
  
  var numChild = jQuery('#ec-friends-list').children('div').length ;

  var forr = subsequentFriend   // add the new label
      .children('label')              
      .attr('for','emailfriend' + numChild);

  var input = subsequentFriend  // add the new input field
      .children('div')
      .children('input').attr('name','emailfriend' + numChild).attr('value','').end()
      .after("<a href='#' class='smaller float' onclick='return ecam.removeFriend(this);'>remove</a>");

  return false  ;
}

/**
 * respond to user
 * remove one of the friends 
 */


ecam.removeFriend = function(friendElement)
{
  jQuery(friendElement).parent().remove(); // remove the whole line
  return false;
}


ecam.removeLabel = function(inputElement)
{
  var input = jQuery(inputElement)
  var val = input.attr('value');
  if (val.length > 0) 
      input.next('label').hide();
  else 
      input.next('label').show();
  
  return false;
}
